#ifndef _COMMON_GLSL_
#define _COMMON_GLSL_

precision highp float;
precision highp int;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Record {
    float t;
    vec3 p;
    vec2 uv;
    vec3 normal;
    bool front_face;
    uint material;
};

struct Sphere {
    vec3 center;
    float radius;
    uint material;
};

struct Triangle {
    vec3 p0;
    vec3 p1;
    vec3 p2;
    vec3 n0;
    vec3 n1;
    vec3 n2;
    vec2 uv0;
    vec2 uv1;
    vec2 uv2;
    uint material;
};

struct BVHNode {
    vec3 min;
    vec3 max;
    uint left;
    uint right;
    uint start;
    uint end;
};

struct Material {
    vec3 diffuse;
    int diffuse_texture;
    vec3 emissive;
    int emissive_texture;
    float roughness;
    float metalness;
    float transparency;
    float ir;
};

struct Model {
    uint root;
    mat4 transform;
    mat4 inverse_transform;
    mat3 normal_transform;
};

struct Texture {
    vec2 uv0;
    vec2 uv1;
};

struct Interval {
    float min;
    float max;
};

void Seed(in uint _seed);
float Random();
float Random(in float min, in float max);
vec2 RandomVec2();
vec2 RandomVec2(in float min, in float max);
vec3 RandomVec3();
vec3 RandomVec3(in float min, in float max);
vec3 RandomUnitVec3();
vec3 RandomInUnitSphere();

vec3 Ray_At(in Ray self, in float t);
void Record_SetNormal(inout Record self, in Ray ray, in vec3 outward_normal);

bool Sphere_Hit(in Sphere self, in Ray ray, in Interval ray_t, inout Record rec);
bool Triangle_Hit(in uint index, in Ray ray, in Interval ray_t, inout Record rec);
bool BVHNode_Hit(in uint index, in Ray ray, in Interval ray_t);

bool Interval_Contains(in Interval self, in float x);
bool Interval_Surrounds(in Interval self, in float x);

vec3 SendRay(in Ray ray);
bool Scatter(inout Ray ray, in Record rec, inout vec3 contribution, inout vec3 light);
vec3 Miss(in Ray ray);

#endif// _COMMON_GLSL_
